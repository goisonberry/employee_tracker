{"version":3,"sources":["components/Wrapper/index.js","components/Header/index.js","components/SearchArea/index.js","components/TableArea/index.js","utils/API.js","components/Main/index.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","props","className","Header","SearchArea","id","type","placeholder","onChange","e","employeeSearch","TableArea","onClick","sortLastName","employees","map","emp","key","name","value","src","picture","thumbnail","alt","first","last","phone","email","dob","date","slice","axios","get","Main","state","sortStatus","filteredEmployees","event","nameSearch","target","empLookingFor","filter","foundEmp","toLowerCase","includes","setState","ascendingEmp","sort","a","b","descendingEmp","lname","API","then","data","results","this","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"oWAOeA,MAJf,SAAiBC,GACf,OAAO,wCAAMC,UAAU,WAAcD,K,MCOxBE,MARf,WACE,OACE,4BAAQD,UAAU,UAChB,oD,sCCSSE,MAZf,SAAoBH,GAClB,OACE,yBAAKI,GAAG,cACN,2BACEC,KAAK,OACLC,YAAY,SACZC,SAAU,SAACC,GAAD,OAAOR,EAAMS,eAAeD,Q,MC2B/BE,MAjCf,SAAmBV,GACjB,OACE,2BAAOC,UAAU,SACf,+BACE,4BACE,kCACA,qCACA,wBAAIU,QAASX,EAAMY,cAAnB,QACA,qCACA,qCACA,qCAGJ,+BACGZ,EAAMa,UAAUC,KAAI,SAACC,GACpB,OACE,wBAAIC,IAAKD,EAAIX,GAAGa,KAAO,IAAMF,EAAIX,GAAGc,OAClC,4BAAKH,EAAIX,GAAGa,KAAO,IAAMF,EAAIX,GAAGc,OAChC,4BACE,yBAAKC,IAAKJ,EAAIK,QAAQC,UAAWC,IAAI,cAEvC,4BAAKP,EAAIE,KAAKM,MAAQ,IAAMR,EAAIE,KAAKO,MACrC,4BAAKT,EAAIU,OACT,4BAAKV,EAAIW,OACT,4BAAKX,EAAIY,IAAIC,KAAKC,MAAM,EAAG,Y,iBCzB1B,EACC,WACZ,OAAOC,IAAMC,IACX,qFCCeC,G,kNACnBC,MAAQ,CACNpB,UAAW,GACXqB,WAAY,IACZC,kBAAmB,I,EAWrB1B,eAAiB,SAAC2B,GAEhB,IAAIC,EAAaD,EAAME,OAAOpB,MAC1BqB,EAAgB,EAAKN,MAAMpB,UAAU2B,QAAO,SAACC,GAC/C,OAAOA,EAASxB,KAAKO,KAClBkB,cACAC,SAASN,EAAWK,kBAEzB,EAAKE,SAAS,CAAET,kBAAmBI,K,EAErC3B,aAAe,WAEb,GAA8B,MAA1B,EAAKqB,MAAMC,WAAoB,CACjC,IAAIW,EAAe,EAAKZ,MAAME,kBAAkBW,MAAK,SAACC,EAAGC,GAAJ,OACnDD,EAAE9B,KAAKO,KAAOwB,EAAE/B,KAAKO,KAAO,GAAK,KAGnC,EAAKoB,SAAS,CACZT,kBAAmBU,EACnBX,WAAY,UAET,CACL,IAAIe,EAAgB,EAAKhB,MAAMpB,UAAUiC,MAAK,SAACC,EAAGC,GAAJ,OAC5CD,EAAE9B,KAAKO,KAAOwB,EAAEE,MAAM1B,KAAO,GAAK,KAGpC,EAAKoB,SAAS,CACZT,kBAAmBc,EACnBf,WAAY,Q,kEArCG,IAAD,OAClBiB,IAAmBC,MAAK,SAACC,GACvB,EAAKT,SAAS,CACZ/B,UAAWwC,EAAKA,KAAKC,QACrBnB,kBAAmBkB,EAAKA,KAAKC,e,+BAsCjC,OACE,oCACE,kBAAC,EAAD,CAAY7C,eAAgB8C,KAAK9C,iBACjC,kBAAC,EAAD,CACEI,UAAW0C,KAAKtB,MAAME,kBACtBvB,aAAc2C,KAAK3C,oB,GArDK4C,c,MCYnBC,MAXf,WACE,OACE,yBAAKxD,UAAU,OACb,kBAAC,EAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,SCAYyD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlB,MAAK,SAAAmB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.64c4975c.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Wrapper(props) {\r\n  return <main className=\"wrapper\" {...props} />;\r\n}\r\n\r\nexport default Wrapper;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Header() {\r\n  return (\r\n    <header className=\"header\">\r\n      <h2>Employee Directory</h2>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction SearchArea(props) {\r\n  return (\r\n    <div id=\"searchArea\">\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"search\"\r\n        onChange={(e) => props.employeeSearch(e)}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SearchArea;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction TableArea(props) {\r\n  return (\r\n    <table className=\"table\">\r\n      <thead>\r\n        <tr>\r\n          <th>ID</th>\r\n          <th>Image</th>\r\n          <th onClick={props.sortLastName}>Name</th>\r\n          <th>Phone</th>\r\n          <th>Email</th>\r\n          <th>DOB</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {props.employees.map((emp) => {\r\n          return (\r\n            <tr key={emp.id.name + \"-\" + emp.id.value}>\r\n              <td>{emp.id.name + \"-\" + emp.id.value}</td>\r\n              <td>\r\n                <img src={emp.picture.thumbnail} alt=\"employee\" />\r\n              </td>\r\n              <td>{emp.name.first + \" \" + emp.name.last}</td>\r\n              <td>{emp.phone}</td>\r\n              <td>{emp.email}</td>\r\n              <td>{emp.dob.date.slice(0, 10)}</td>\r\n            </tr>\r\n          );\r\n        })}\r\n      </tbody>\r\n    </table>\r\n  );\r\n}\r\n\r\nexport default TableArea;\r\n","import axios from \"axios\";\r\n\r\nexport default {\r\n  employeeInfo: function () {\r\n    return axios.get(\r\n      \"https://randomuser.me/api/?results=20&inc=id,name,email,dob,phone,picture&nat=us\"\r\n    );\r\n  },\r\n};\r\n\r\n// make a backup with a json file in case this does not work\r\n","import React, { Component } from \"react\";\r\nimport SearchArea from \"../SearchArea\";\r\nimport TableArea from \"../TableArea\";\r\nimport API from \"../../utils/API.js\";\r\nimport \"./style.css\";\r\n\r\nexport default class Main extends Component {\r\n  state = {\r\n    employees: [],\r\n    sortStatus: \"D\",\r\n    filteredEmployees: [],\r\n  };\r\n  componentDidMount() {\r\n    API.employeeInfo().then((data) => {\r\n      this.setState({\r\n        employees: data.data.results,\r\n        filteredEmployees: data.data.results,\r\n      });\r\n    });\r\n  }\r\n\r\n  employeeSearch = (event) => {\r\n    // get what they input event.target.value....use filter to filer all employees this.state.employees.filter (keep lower and uppercase in mind)\r\n    let nameSearch = event.target.value;\r\n    let empLookingFor = this.state.employees.filter((foundEmp) => {\r\n      return foundEmp.name.last\r\n        .toLowerCase()\r\n        .includes(nameSearch.toLowerCase());\r\n    });\r\n    this.setState({ filteredEmployees: empLookingFor });\r\n  };\r\n  sortLastName = () => {\r\n    // add state to say what the current state of function (A and D order)..use if else, sort function pass it a compare function inside the sort function.\r\n    if (this.state.sortStatus === \"D\") {\r\n      let ascendingEmp = this.state.filteredEmployees.sort((a, b) =>\r\n        a.name.last > b.name.last ? 1 : -1\r\n      );\r\n\r\n      this.setState({\r\n        filteredEmployees: ascendingEmp,\r\n        sortStatus: \"A\",\r\n      });\r\n    } else {\r\n      let descendingEmp = this.state.employees.sort((a, b) =>\r\n        a.name.last < b.lname.last ? 1 : -1\r\n      );\r\n\r\n      this.setState({\r\n        filteredEmployees: descendingEmp,\r\n        sortStatus: \"D\",\r\n      });\r\n    }\r\n  };\r\n  render() {\r\n    return (\r\n      <>\r\n        <SearchArea employeeSearch={this.employeeSearch} />\r\n        <TableArea\r\n          employees={this.state.filteredEmployees}\r\n          sortLastName={this.sortLastName}\r\n        />\r\n      </>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\nimport Wrapper from \"./components/Wrapper\";\nimport Header from \"./components/Header\";\nimport Main from \"./components/Main\";\n\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Wrapper>\n        <Header />\n        <Main />\n      </Wrapper>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}